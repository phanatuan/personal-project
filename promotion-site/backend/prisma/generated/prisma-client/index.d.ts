// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  brand: (where?: BrandWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  promotion: (where?: PromotionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  brand: (where: BrandWhereUniqueInput) => BrandNullablePromise;
  brands: (args?: {
    where?: BrandWhereInput;
    orderBy?: BrandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Brand>;
  brandsConnection: (args?: {
    where?: BrandWhereInput;
    orderBy?: BrandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BrandConnectionPromise;
  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  promotion: (where: PromotionWhereUniqueInput) => PromotionNullablePromise;
  promotions: (args?: {
    where?: PromotionWhereInput;
    orderBy?: PromotionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Promotion>;
  promotionsConnection: (args?: {
    where?: PromotionWhereInput;
    orderBy?: PromotionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PromotionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBrand: (data: BrandCreateInput) => BrandPromise;
  updateBrand: (args: {
    data: BrandUpdateInput;
    where: BrandWhereUniqueInput;
  }) => BrandPromise;
  updateManyBrands: (args: {
    data: BrandUpdateManyMutationInput;
    where?: BrandWhereInput;
  }) => BatchPayloadPromise;
  upsertBrand: (args: {
    where: BrandWhereUniqueInput;
    create: BrandCreateInput;
    update: BrandUpdateInput;
  }) => BrandPromise;
  deleteBrand: (where: BrandWhereUniqueInput) => BrandPromise;
  deleteManyBrands: (where?: BrandWhereInput) => BatchPayloadPromise;
  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createPromotion: (data: PromotionCreateInput) => PromotionPromise;
  updatePromotion: (args: {
    data: PromotionUpdateInput;
    where: PromotionWhereUniqueInput;
  }) => PromotionPromise;
  updateManyPromotions: (args: {
    data: PromotionUpdateManyMutationInput;
    where?: PromotionWhereInput;
  }) => BatchPayloadPromise;
  upsertPromotion: (args: {
    where: PromotionWhereUniqueInput;
    create: PromotionCreateInput;
    update: PromotionUpdateInput;
  }) => PromotionPromise;
  deletePromotion: (where: PromotionWhereUniqueInput) => PromotionPromise;
  deleteManyPromotions: (where?: PromotionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  brand: (
    where?: BrandSubscriptionWhereInput
  ) => BrandSubscriptionPayloadSubscription;
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  promotion: (
    where?: PromotionSubscriptionWhereInput
  ) => PromotionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PromoStatus = "ACTIVE" | "EXPIRED";

export type PromotionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "promoType_ASC"
  | "promoType_DESC"
  | "promoCode_ASC"
  | "promoCode_DESC"
  | "isFeatured_ASC"
  | "isFeatured_DESC"
  | "promoStatus_ASC"
  | "promoStatus_DESC"
  | "expiredAt_ASC"
  | "expiredAt_DESC"
  | "affiliateUrl_ASC"
  | "affiliateUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PromoType = "COUPON" | "DEALS";

export type BrandOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type UserRole = "ADMIN" | "NORMAL";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PromotionUpdateWithWhereUniqueWithoutBrandInput {
  where: PromotionWhereUniqueInput;
  data: PromotionUpdateWithoutBrandDataInput;
}

export type BrandWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PromotionUpsertWithWhereUniqueWithoutBrandInput {
  where: PromotionWhereUniqueInput;
  update: PromotionUpdateWithoutBrandDataInput;
  create: PromotionCreateWithoutBrandInput;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  promotions_every?: Maybe<PromotionWhereInput>;
  promotions_some?: Maybe<PromotionWhereInput>;
  promotions_none?: Maybe<PromotionWhereInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface PromotionUpdateWithWhereUniqueWithoutCategoryInput {
  where: PromotionWhereUniqueInput;
  data: PromotionUpdateWithoutCategoryDataInput;
}

export interface PromotionCreateManyWithoutCategoryInput {
  create?: Maybe<
    PromotionCreateWithoutCategoryInput[] | PromotionCreateWithoutCategoryInput
  >;
  connect?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
}

export interface PromotionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  promoType?: Maybe<PromoType>;
  promoType_not?: Maybe<PromoType>;
  promoType_in?: Maybe<PromoType[] | PromoType>;
  promoType_not_in?: Maybe<PromoType[] | PromoType>;
  promoCode?: Maybe<String>;
  promoCode_not?: Maybe<String>;
  promoCode_in?: Maybe<String[] | String>;
  promoCode_not_in?: Maybe<String[] | String>;
  promoCode_lt?: Maybe<String>;
  promoCode_lte?: Maybe<String>;
  promoCode_gt?: Maybe<String>;
  promoCode_gte?: Maybe<String>;
  promoCode_contains?: Maybe<String>;
  promoCode_not_contains?: Maybe<String>;
  promoCode_starts_with?: Maybe<String>;
  promoCode_not_starts_with?: Maybe<String>;
  promoCode_ends_with?: Maybe<String>;
  promoCode_not_ends_with?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  isFeatured_not?: Maybe<Boolean>;
  promoStatus?: Maybe<PromoStatus>;
  promoStatus_not?: Maybe<PromoStatus>;
  promoStatus_in?: Maybe<PromoStatus[] | PromoStatus>;
  promoStatus_not_in?: Maybe<PromoStatus[] | PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  expiredAt_not?: Maybe<DateTimeInput>;
  expiredAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiredAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiredAt_lt?: Maybe<DateTimeInput>;
  expiredAt_lte?: Maybe<DateTimeInput>;
  expiredAt_gt?: Maybe<DateTimeInput>;
  expiredAt_gte?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
  affiliateUrl_not?: Maybe<String>;
  affiliateUrl_in?: Maybe<String[] | String>;
  affiliateUrl_not_in?: Maybe<String[] | String>;
  affiliateUrl_lt?: Maybe<String>;
  affiliateUrl_lte?: Maybe<String>;
  affiliateUrl_gt?: Maybe<String>;
  affiliateUrl_gte?: Maybe<String>;
  affiliateUrl_contains?: Maybe<String>;
  affiliateUrl_not_contains?: Maybe<String>;
  affiliateUrl_starts_with?: Maybe<String>;
  affiliateUrl_not_starts_with?: Maybe<String>;
  affiliateUrl_ends_with?: Maybe<String>;
  affiliateUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PromotionScalarWhereInput[] | PromotionScalarWhereInput>;
  OR?: Maybe<PromotionScalarWhereInput[] | PromotionScalarWhereInput>;
  NOT?: Maybe<PromotionScalarWhereInput[] | PromotionScalarWhereInput>;
}

export interface PromotionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PromotionWhereInput>;
  AND?: Maybe<
    PromotionSubscriptionWhereInput[] | PromotionSubscriptionWhereInput
  >;
  OR?: Maybe<
    PromotionSubscriptionWhereInput[] | PromotionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PromotionSubscriptionWhereInput[] | PromotionSubscriptionWhereInput
  >;
}

export interface BrandCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  promotions?: Maybe<PromotionCreateManyWithoutBrandInput>;
}

export interface BrandSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BrandWhereInput>;
  AND?: Maybe<BrandSubscriptionWhereInput[] | BrandSubscriptionWhereInput>;
  OR?: Maybe<BrandSubscriptionWhereInput[] | BrandSubscriptionWhereInput>;
  NOT?: Maybe<BrandSubscriptionWhereInput[] | BrandSubscriptionWhereInput>;
}

export interface PromotionCreateManyWithoutBrandInput {
  create?: Maybe<
    PromotionCreateWithoutBrandInput[] | PromotionCreateWithoutBrandInput
  >;
  connect?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface PromotionCreateWithoutBrandInput {
  id?: Maybe<ID_Input>;
  title: String;
  promoType?: Maybe<PromoType>;
  promoCode?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  category?: Maybe<CategoryCreateOneWithoutPromotionsInput>;
  promoStatus?: Maybe<PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
}

export interface BrandWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  promotions_every?: Maybe<PromotionWhereInput>;
  promotions_some?: Maybe<PromotionWhereInput>;
  promotions_none?: Maybe<PromotionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BrandWhereInput[] | BrandWhereInput>;
  OR?: Maybe<BrandWhereInput[] | BrandWhereInput>;
  NOT?: Maybe<BrandWhereInput[] | BrandWhereInput>;
}

export interface CategoryCreateOneWithoutPromotionsInput {
  create?: Maybe<CategoryCreateWithoutPromotionsInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface PromotionUpdateManyMutationInput {
  title?: Maybe<String>;
  promoType?: Maybe<PromoType>;
  promoCode?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  promoStatus?: Maybe<PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
}

export interface CategoryCreateWithoutPromotionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
}

export type PromotionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BrandUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  promotions?: Maybe<PromotionUpdateManyWithoutBrandInput>;
}

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PromotionUpdateManyWithoutBrandInput {
  create?: Maybe<
    PromotionCreateWithoutBrandInput[] | PromotionCreateWithoutBrandInput
  >;
  delete?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
  connect?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
  set?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
  disconnect?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
  update?: Maybe<
    | PromotionUpdateWithWhereUniqueWithoutBrandInput[]
    | PromotionUpdateWithWhereUniqueWithoutBrandInput
  >;
  upsert?: Maybe<
    | PromotionUpsertWithWhereUniqueWithoutBrandInput[]
    | PromotionUpsertWithWhereUniqueWithoutBrandInput
  >;
  deleteMany?: Maybe<PromotionScalarWhereInput[] | PromotionScalarWhereInput>;
  updateMany?: Maybe<
    | PromotionUpdateManyWithWhereNestedInput[]
    | PromotionUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface PromotionUpdateManyWithoutCategoryInput {
  create?: Maybe<
    PromotionCreateWithoutCategoryInput[] | PromotionCreateWithoutCategoryInput
  >;
  delete?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
  connect?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
  set?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
  disconnect?: Maybe<PromotionWhereUniqueInput[] | PromotionWhereUniqueInput>;
  update?: Maybe<
    | PromotionUpdateWithWhereUniqueWithoutCategoryInput[]
    | PromotionUpdateWithWhereUniqueWithoutCategoryInput
  >;
  upsert?: Maybe<
    | PromotionUpsertWithWhereUniqueWithoutCategoryInput[]
    | PromotionUpsertWithWhereUniqueWithoutCategoryInput
  >;
  deleteMany?: Maybe<PromotionScalarWhereInput[] | PromotionScalarWhereInput>;
  updateMany?: Maybe<
    | PromotionUpdateManyWithWhereNestedInput[]
    | PromotionUpdateManyWithWhereNestedInput
  >;
}

export interface PromotionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  brand?: Maybe<BrandWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  promoType?: Maybe<PromoType>;
  promoType_not?: Maybe<PromoType>;
  promoType_in?: Maybe<PromoType[] | PromoType>;
  promoType_not_in?: Maybe<PromoType[] | PromoType>;
  promoCode?: Maybe<String>;
  promoCode_not?: Maybe<String>;
  promoCode_in?: Maybe<String[] | String>;
  promoCode_not_in?: Maybe<String[] | String>;
  promoCode_lt?: Maybe<String>;
  promoCode_lte?: Maybe<String>;
  promoCode_gt?: Maybe<String>;
  promoCode_gte?: Maybe<String>;
  promoCode_contains?: Maybe<String>;
  promoCode_not_contains?: Maybe<String>;
  promoCode_starts_with?: Maybe<String>;
  promoCode_not_starts_with?: Maybe<String>;
  promoCode_ends_with?: Maybe<String>;
  promoCode_not_ends_with?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  isFeatured_not?: Maybe<Boolean>;
  category?: Maybe<CategoryWhereInput>;
  promoStatus?: Maybe<PromoStatus>;
  promoStatus_not?: Maybe<PromoStatus>;
  promoStatus_in?: Maybe<PromoStatus[] | PromoStatus>;
  promoStatus_not_in?: Maybe<PromoStatus[] | PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  expiredAt_not?: Maybe<DateTimeInput>;
  expiredAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiredAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiredAt_lt?: Maybe<DateTimeInput>;
  expiredAt_lte?: Maybe<DateTimeInput>;
  expiredAt_gt?: Maybe<DateTimeInput>;
  expiredAt_gte?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
  affiliateUrl_not?: Maybe<String>;
  affiliateUrl_in?: Maybe<String[] | String>;
  affiliateUrl_not_in?: Maybe<String[] | String>;
  affiliateUrl_lt?: Maybe<String>;
  affiliateUrl_lte?: Maybe<String>;
  affiliateUrl_gt?: Maybe<String>;
  affiliateUrl_gte?: Maybe<String>;
  affiliateUrl_contains?: Maybe<String>;
  affiliateUrl_not_contains?: Maybe<String>;
  affiliateUrl_starts_with?: Maybe<String>;
  affiliateUrl_not_starts_with?: Maybe<String>;
  affiliateUrl_ends_with?: Maybe<String>;
  affiliateUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PromotionWhereInput[] | PromotionWhereInput>;
  OR?: Maybe<PromotionWhereInput[] | PromotionWhereInput>;
  NOT?: Maybe<PromotionWhereInput[] | PromotionWhereInput>;
}

export interface PromotionUpdateWithoutBrandDataInput {
  title?: Maybe<String>;
  promoType?: Maybe<PromoType>;
  promoCode?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  category?: Maybe<CategoryUpdateOneWithoutPromotionsInput>;
  promoStatus?: Maybe<PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
}

export interface BrandUpdateWithoutPromotionsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface CategoryUpdateOneWithoutPromotionsInput {
  create?: Maybe<CategoryCreateWithoutPromotionsInput>;
  update?: Maybe<CategoryUpdateWithoutPromotionsDataInput>;
  upsert?: Maybe<CategoryUpsertWithoutPromotionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface PromotionUpdateWithoutCategoryDataInput {
  brand?: Maybe<BrandUpdateOneRequiredWithoutPromotionsInput>;
  title?: Maybe<String>;
  promoType?: Maybe<PromoType>;
  promoCode?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  promoStatus?: Maybe<PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
}

export interface CategoryUpdateWithoutPromotionsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface CategoryUpsertWithoutPromotionsInput {
  update: CategoryUpdateWithoutPromotionsDataInput;
  create: CategoryCreateWithoutPromotionsInput;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  promotions?: Maybe<PromotionUpdateManyWithoutCategoryInput>;
}

export interface PromotionUpdateInput {
  brand?: Maybe<BrandUpdateOneRequiredWithoutPromotionsInput>;
  title?: Maybe<String>;
  promoType?: Maybe<PromoType>;
  promoCode?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  category?: Maybe<CategoryUpdateOneWithoutPromotionsInput>;
  promoStatus?: Maybe<PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
}

export interface BrandCreateWithoutPromotionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
}

export interface PromotionUpsertWithWhereUniqueWithoutCategoryInput {
  where: PromotionWhereUniqueInput;
  update: PromotionUpdateWithoutCategoryDataInput;
  create: PromotionCreateWithoutCategoryInput;
}

export interface PromotionUpdateManyWithWhereNestedInput {
  where: PromotionScalarWhereInput;
  data: PromotionUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<UserRole>;
  role_not?: Maybe<UserRole>;
  role_in?: Maybe<UserRole[] | UserRole>;
  role_not_in?: Maybe<UserRole[] | UserRole>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PromotionUpdateManyDataInput {
  title?: Maybe<String>;
  promoType?: Maybe<PromoType>;
  promoCode?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  promoStatus?: Maybe<PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  promotions?: Maybe<PromotionCreateManyWithoutCategoryInput>;
}

export interface PromotionCreateWithoutCategoryInput {
  id?: Maybe<ID_Input>;
  brand: BrandCreateOneWithoutPromotionsInput;
  title: String;
  promoType?: Maybe<PromoType>;
  promoCode?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  promoStatus?: Maybe<PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
}

export interface BrandCreateOneWithoutPromotionsInput {
  create?: Maybe<BrandCreateWithoutPromotionsInput>;
  connect?: Maybe<BrandWhereUniqueInput>;
}

export interface BrandUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface BrandUpdateOneRequiredWithoutPromotionsInput {
  create?: Maybe<BrandCreateWithoutPromotionsInput>;
  update?: Maybe<BrandUpdateWithoutPromotionsDataInput>;
  upsert?: Maybe<BrandUpsertWithoutPromotionsInput>;
  connect?: Maybe<BrandWhereUniqueInput>;
}

export interface BrandUpsertWithoutPromotionsInput {
  update: BrandUpdateWithoutPromotionsDataInput;
  create: BrandCreateWithoutPromotionsInput;
}

export interface PromotionCreateInput {
  id?: Maybe<ID_Input>;
  brand: BrandCreateOneWithoutPromotionsInput;
  title: String;
  promoType?: Maybe<PromoType>;
  promoCode?: Maybe<String>;
  isFeatured?: Maybe<Boolean>;
  category?: Maybe<CategoryCreateOneWithoutPromotionsInput>;
  promoStatus?: Maybe<PromoStatus>;
  expiredAt?: Maybe<DateTimeInput>;
  affiliateUrl?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password?: String;
  role?: UserRole;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PromotionSubscriptionPayload {
  mutation: MutationType;
  node: Promotion;
  updatedFields: String[];
  previousValues: PromotionPreviousValues;
}

export interface PromotionSubscriptionPayloadPromise
  extends Promise<PromotionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PromotionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PromotionPreviousValuesPromise>() => T;
}

export interface PromotionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PromotionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PromotionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PromotionPreviousValuesSubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateBrand {
  count: Int;
}

export interface AggregateBrandPromise
  extends Promise<AggregateBrand>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBrandSubscription
  extends Promise<AsyncIterator<AggregateBrand>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BrandEdge {
  node: Brand;
  cursor: String;
}

export interface BrandEdgePromise extends Promise<BrandEdge>, Fragmentable {
  node: <T = BrandPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BrandEdgeSubscription
  extends Promise<AsyncIterator<BrandEdge>>,
    Fragmentable {
  node: <T = BrandSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password?: String;
  role?: UserRole;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface Brand {
  id: ID_Output;
  name: String;
  description: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface BrandPromise extends Promise<Brand>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  promotions: <T = FragmentableArray<Promotion>>(args?: {
    where?: PromotionWhereInput;
    orderBy?: PromotionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BrandSubscription
  extends Promise<AsyncIterator<Brand>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  promotions: <T = Promise<AsyncIterator<PromotionSubscription>>>(args?: {
    where?: PromotionWhereInput;
    orderBy?: PromotionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BrandNullablePromise
  extends Promise<Brand | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  promotions: <T = FragmentableArray<Promotion>>(args?: {
    where?: PromotionWhereInput;
    orderBy?: PromotionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PromotionEdge {
  node: Promotion;
  cursor: String;
}

export interface PromotionEdgePromise
  extends Promise<PromotionEdge>,
    Fragmentable {
  node: <T = PromotionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PromotionEdgeSubscription
  extends Promise<AsyncIterator<PromotionEdge>>,
    Fragmentable {
  node: <T = PromotionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BrandSubscriptionPayload {
  mutation: MutationType;
  node: Brand;
  updatedFields: String[];
  previousValues: BrandPreviousValues;
}

export interface BrandSubscriptionPayloadPromise
  extends Promise<BrandSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BrandPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BrandPreviousValuesPromise>() => T;
}

export interface BrandSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BrandSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BrandSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BrandPreviousValuesSubscription>() => T;
}

export interface Promotion {
  id: ID_Output;
  title: String;
  promoType?: PromoType;
  promoCode?: String;
  isFeatured: Boolean;
  promoStatus?: PromoStatus;
  expiredAt?: DateTimeOutput;
  affiliateUrl?: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface PromotionPromise extends Promise<Promotion>, Fragmentable {
  id: () => Promise<ID_Output>;
  brand: <T = BrandPromise>() => T;
  title: () => Promise<String>;
  promoType: () => Promise<PromoType>;
  promoCode: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  category: <T = CategoryPromise>() => T;
  promoStatus: () => Promise<PromoStatus>;
  expiredAt: () => Promise<DateTimeOutput>;
  affiliateUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PromotionSubscription
  extends Promise<AsyncIterator<Promotion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  brand: <T = BrandSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  promoType: () => Promise<AsyncIterator<PromoType>>;
  promoCode: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  category: <T = CategorySubscription>() => T;
  promoStatus: () => Promise<AsyncIterator<PromoStatus>>;
  expiredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  affiliateUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PromotionNullablePromise
  extends Promise<Promotion | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  brand: <T = BrandPromise>() => T;
  title: () => Promise<String>;
  promoType: () => Promise<PromoType>;
  promoCode: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  category: <T = CategoryPromise>() => T;
  promoStatus: () => Promise<PromoStatus>;
  expiredAt: () => Promise<DateTimeOutput>;
  affiliateUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface BrandConnection {
  pageInfo: PageInfo;
  edges: BrandEdge[];
}

export interface BrandConnectionPromise
  extends Promise<BrandConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BrandEdge>>() => T;
  aggregate: <T = AggregateBrandPromise>() => T;
}

export interface BrandConnectionSubscription
  extends Promise<AsyncIterator<BrandConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BrandEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBrandSubscription>() => T;
}

export interface BrandPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface BrandPreviousValuesPromise
  extends Promise<BrandPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BrandPreviousValuesSubscription
  extends Promise<AsyncIterator<BrandPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PromotionPreviousValues {
  id: ID_Output;
  title: String;
  promoType?: PromoType;
  promoCode?: String;
  isFeatured: Boolean;
  promoStatus?: PromoStatus;
  expiredAt?: DateTimeOutput;
  affiliateUrl?: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface PromotionPreviousValuesPromise
  extends Promise<PromotionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  promoType: () => Promise<PromoType>;
  promoCode: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  promoStatus: () => Promise<PromoStatus>;
  expiredAt: () => Promise<DateTimeOutput>;
  affiliateUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PromotionPreviousValuesSubscription
  extends Promise<AsyncIterator<PromotionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  promoType: () => Promise<AsyncIterator<PromoType>>;
  promoCode: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  promoStatus: () => Promise<AsyncIterator<PromoStatus>>;
  expiredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  affiliateUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Category {
  id: ID_Output;
  name: String;
  description: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  promotions: <T = FragmentableArray<Promotion>>(args?: {
    where?: PromotionWhereInput;
    orderBy?: PromotionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  promotions: <T = Promise<AsyncIterator<PromotionSubscription>>>(args?: {
    where?: PromotionWhereInput;
    orderBy?: PromotionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  promotions: <T = FragmentableArray<Promotion>>(args?: {
    where?: PromotionWhereInput;
    orderBy?: PromotionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PromotionConnection {
  pageInfo: PageInfo;
  edges: PromotionEdge[];
}

export interface PromotionConnectionPromise
  extends Promise<PromotionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PromotionEdge>>() => T;
  aggregate: <T = AggregatePromotionPromise>() => T;
}

export interface PromotionConnectionSubscription
  extends Promise<AsyncIterator<PromotionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PromotionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePromotionSubscription>() => T;
}

export interface AggregatePromotion {
  count: Int;
}

export interface AggregatePromotionPromise
  extends Promise<AggregatePromotion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePromotionSubscription
  extends Promise<AsyncIterator<AggregatePromotion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Promotion",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Brand",
    embedded: false
  },
  {
    name: "PromoStatus",
    embedded: false
  },
  {
    name: "PromoType",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
